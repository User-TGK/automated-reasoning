
MODULE main
VAR
channels : array 0..4 of 0..4;
sources : array 1..4 of 1..4;
targets : array 1..4 of 1..4;
routes : array 1..4 of array 1..4 of 0..4;
D : boolean;
ASSIGN
init(channels[1]) := 0;
init(channels[2]) := 0;
init(channels[3]) := 0;
init(channels[4]) := 0;
init(sources[1]) := 1;
init(targets[1]) := 2;
init(sources[2]) := 2;
init(targets[2]) := 3;
init(sources[3]) := 3;
init(targets[3]) := 4;
init(sources[4]) := 4;
init(targets[4]) := 1;
init(routes[1][1]) := 0;
init(routes[1][2]) := 1;
init(routes[1][3]) := 1;
init(routes[1][4]) := 1;
init(routes[2][1]) := 2;
init(routes[2][2]) := 0;
init(routes[2][3]) := 2;
init(routes[2][4]) := 2;
init(routes[3][1]) := 3;
init(routes[3][2]) := 3;
init(routes[3][3]) := 0;
init(routes[3][4]) := 3;
init(routes[4][1]) := 4;
init(routes[4][2]) := 4;
init(routes[4][3]) := 4;
init(routes[4][4]) := 0;
init(D) := FALSE;
TRANS
case channels[1] = targets[1] : next(channels[1]) = 0;
channels[1] != 0 & channels[1] != targets[1] & routes[targets[1]][channels[1]] != 0 & channels[routes[targets[1]][channels[1]]] = 0 : next(channels[routes[targets[1]][channels[1]]]) = channels[1] & next(channels[1]) = 0;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[2] = targets[2] : next(channels[2]) = 0;
channels[2] != 0 & channels[2] != targets[2] & routes[targets[2]][channels[2]] != 0 & channels[routes[targets[2]][channels[2]]] = 0 : next(channels[routes[targets[2]][channels[2]]]) = channels[2] & next(channels[2]) = 0;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[3] = targets[3] : next(channels[3]) = 0;
channels[3] != 0 & channels[3] != targets[3] & routes[targets[3]][channels[3]] != 0 & channels[routes[targets[3]][channels[3]]] = 0 : next(channels[routes[targets[3]][channels[3]]]) = channels[3] & next(channels[3]) = 0;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[4] = targets[4] : next(channels[4]) = 0;
channels[4] != 0 & channels[4] != targets[4] & routes[targets[4]][channels[4]] != 0 & channels[routes[targets[4]][channels[4]]] = 0 : next(channels[routes[targets[4]][channels[4]]]) = channels[4] & next(channels[4]) = 0;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[1][2]] = 0 : next(channels[routes[1][2]]) = 2;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[1][3]] = 0 : next(channels[routes[1][3]]) = 3;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[1][4]] = 0 : next(channels[routes[1][4]]) = 4;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[2][1]] = 0 : next(channels[routes[2][1]]) = 1;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[2][3]] = 0 : next(channels[routes[2][3]]) = 3;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[2][4]] = 0 : next(channels[routes[2][4]]) = 4;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[3][1]] = 0 : next(channels[routes[3][1]]) = 1;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[3][2]] = 0 : next(channels[routes[3][2]]) = 2;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[3][4]] = 0 : next(channels[routes[3][4]]) = 4;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[4][1]] = 0 : next(channels[routes[4][1]]) = 1;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[4][2]] = 0 : next(channels[routes[4][2]]) = 2;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case channels[routes[4][3]] = 0 : next(channels[routes[4][3]]) = 3;
TRUE : next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac
|
case !((channels[1] = targets[1]) | (channels[1] != 0 & channels[1] != targets[1] & routes[targets[1]][channels[1]] != 0 & channels[routes[targets[1]][channels[1]]] = 0) |(channels[2] = targets[2]) | (channels[2] != 0 & channels[2] != targets[2] & routes[targets[2]][channels[2]] != 0 & channels[routes[targets[2]][channels[2]]] = 0) |(channels[3] = targets[3]) | (channels[3] != 0 & channels[3] != targets[3] & routes[targets[3]][channels[3]] != 0 & channels[routes[targets[3]][channels[3]]] = 0) |(channels[4] = targets[4]) | (channels[4] != 0 & channels[4] != targets[4] & routes[targets[4]][channels[4]] != 0 & channels[routes[targets[4]][channels[4]]] = 0) |channels[routes[1][2]] = 0 | channels[routes[1][3]] = 0 | channels[routes[1][4]] = 0 | channels[routes[2][1]] = 0 | channels[routes[2][3]] = 0 | channels[routes[2][4]] = 0 | channels[routes[3][1]] = 0 | channels[routes[3][2]] = 0 | channels[routes[3][4]] = 0 | channels[routes[4][1]] = 0 | channels[routes[4][2]] = 0 | channels[routes[4][3]] = 0 ) : next(D) = TRUE;
TRUE : next(D) = D & next(channels[1]) = channels[1] & next(channels[2]) = channels[2] & next(channels[3]) = channels[3] & next(channels[4]) = channels[4] ; esac;
CTLSPEC !EF(D)